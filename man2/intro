名称
  intro -- 主要介绍系统调用与返回值

库
  标准C语言库(libc,-lc)

使用方法
  #include <errno.h>

说明
  本章为您提供了系统调用及其返回值的概览，另外也为您提供其他常规定义与概念。

返回值
  几乎所有系统调用都会提供一个错误编码，这些编码主要源自标志符errno，位于
  <sys/errno.h>，定义内容类如下面这段代码：

		extern int * __error();
		#define errno (* __error())

  __error()函数的返回为一个指针，该指针并非指向初始线程而是指向线程的结构体。
  如果进程为一个单线程或非线程的程序，则__error()返回一个指向已定义的全局错
  误变量指针。

  当系统调用过程中检测到错误，它将返回一个整型值表示错误（通常为-1）并生成
  一个errno。（这使得程序可以在错误发生时作出反映后中断并获取一个-1错误。）
  成功执行的系统调用则不会产生errno。一旦错误发生，值将永久保存，直到下一个
  错误发生。错误信息只有在问题发生时才能被检测到。需要说明的是，系统调用的
  错误值并不能明确表示所有可能发生的错误内容，只有在对应环境、中断一致才能
  体现该错误所表达的意义。

  如下信息详细列出了<sys/errno.h>文件中所定义的全部错误值与名称。

	1	EPERM		权限不足。当前操作因没有指定的权限而受限。

	2	ENOENT		指定文件或文件夹不存在。通常是由于指定路径
				不存在或路径为空所致。

	3	ESRCH		指定进程不存在。指定的进程PID并不存在.

	4	EINTR		系统调用中断。执行中断功能时产生了一个异步
				中断信号（如SIGINT或SIGQUIT）。如果信号句柄
				正常返回。中断类的系统调用页会产生此错误码。

	5	EIO		输入/输出错误。主要表示物理输入或输出设备的
				错误。该错误直到对后续同等文件描述符进行操
				作，且因为该错误发生而导致文件描述符的丢失
				（重写）时才会被记录。

	6	ENXIO		设备未被配置。对指定设备文件描述符不存在。
				亦表示操作超出设备限制。该错误值也会在发
				生诸如磁带机未接入、磁盘柜中无磁盘时产生。

	7	E2BIG		参数过长。新进程执行时所接受的参数数量、位
				数、环境列表超出设定值。
				（请参考<sys/param.h>中的NCARGS部分）

	8	ENOEXEC		执行格式错误。可执行文件权限正确但却不具备
				可执行程序格式。

	9	EBADF		不正确的文件描述符。文件描述符的参数超限，
				文件无法打开。对只读（或只写）文件发送读写
				请求。

	10	ECHILD		无子进程。wait(2)或waitpid(2)函数执行目标
				不存在，或执行于不可延迟的子进程中。

	11	EDEADLK		资源锁死屏蔽。当发生可能导致系统资源锁死的
				操作时返回。

	12	ENOMEM		无法分配内存。新执行进程所需内存超出硬件限
				额或系统许可的最大分配额。交换空间不足。软
				件限额与对应的硬件限制有关。

	13	EACCESS		权限禁止。文件禁止访问。

	14	EFAULT		地址错误。在调用参数的过程中被系统检测到寻
				址错误。

	15	ENOTBLK		块操作的对象不是块设备或文件。

	16	EBUSY		设备忙。

	17	EEXIST		文件已存在。上下文中指定了已存在的文件。例
				如调用link(2)生成一个link命令。

	18	EXDEV		跨设备链接。链接对象为另一设备中的文件。

	19	ENODEV		设备不支持该操作。

	20	ENOTDIR		目标不是目录。

	21	EISDIR		目标是一个目录。

	22	EINVAL		参数错误。比如为kill(2)调用指定了错误的
				signal(3)。

	23	ENFILE		系统中开启了过多的文件。当打开文件超过系统
				容许的最大值会出现此错误，为了保证系统稳定，
				需要至少关闭一个文件后再执行操作。

	24	EMFILE		开启了过多的文件。系统中开启文件标识符超出
				容许值。通过调用getdtablesize(2)可获取当前
				限额。

	25	ENOTTY		不正确的IO控制设备。控制功能(具体可参考
				ioctl(2))尝试进行不争却的文件或设备的操作。

	26	ETXTBSY		文本文件忙。新进程访问了其它进程正在打开的
				文件并进行写操作。这个问题也可能发生于目标
				文本文件正被open(2)调用。

	27	EFBIG		文件过大。

	28	ENOSPC		设备空间不足。创建文件夹、链接、或通过
				write(2)写入文件时设备无法提供足够的空间。

	29	ESPIPE		非法seek操作。lseek(2)在socket、管道或FIFO
				操作是出现异常。

	30	EROFS		当尝试写入或修改只读文件时会出现此错误值。

	31	EMLINK		硬链接数过多。每个文件最多只能创建32767个
				硬链接。

	32	EPIPE		管道损坏。对管道、socke、FIFO进行写操作时，
				没有与之对应的进程读取数据。

	33	EDOM		参数个数不符。

	34	ERANGE		结果存储内容超出可用空间。

	35	EAGAIN		资源暂时不可用。

	36	EINPROGRESS	相同的操作正在执行。当对一个非块对象执行类
				如connect(2)这种耗时操作时会出现此错误。此
				时并未对操作分配进程。具体可参考fcntl(2)。

	37	EALREADY	同等操作已执行。对一个非块对象执行耗时操作
				并已分配了进程。

	38	ENOTSOCK	通过socket操作非socket对象。不解释。

	39	EDESTADDRREQ	需要指定位址。socke操作必须有明确的位址。

	40	EMSGSIZE	消息内容过长。socket传递消息的内容超出网络
				最大容许值或socket内部缓存容量。

	41	EPROTOTYPE	socket的连接协议错误。比如你在SOCK_STREAM
				类连接中使用ARPA互联网UDP协议

	42	ENOPROTOOPT	指定协议不可用。在调用getsocketopt(2)或
				setsocketopt(2)时配置了错误的信息。

	43	EPROTONOSUPPORT	不支持指定协议。指定的协议并未在系统中配置
				或无实现此协议的接口。

	44	ESOCKTNOSUPPORT	不支持指定socket类型。

	45	EOPNOTSUPP	不支持指定操作。

	46	EPFNOSUPPORT	不支持指定协议群。

	47	EAFNOSUPPORT	协议群中不支持指定地址群。比如你不能为ARPA
				互联网协议指定一个NS地址群。

	48	EADDRINUSE	指定地址已被使用。

	49	EADDRNOTAVAIL	指定地址不可用。

	50	ENETDOWN	掉线。

	51	ENETUNREACH	无法连接指定网络。

	52	ENETRESET	指定目标崩溃并重启。

	53	ECONNABORTED	软件导致连接被取消。

	54	ECONNRESET	目标节点连接被重置。

	55	ENOBUFS		无缓存空间。

	56	EISCONN		socket已经连接。connect(2)调用于已经建立
				的连接中。当调用sendto(2)和sendmsg(2)于已建立
				连接中时也会产生此错误值。

	57	ENOTCONN	socket尚未连接。

	58	ESHUTDOWN	socket不可在断开连接(shutdown(2))后再发送任何
				消息。

	60	ETIMEDOUT	操作超时。connect(2)或send(2)请求并未在时限内
				得到回应。(回应时间取决于协议中规定的时限)

	61	ECONNREFUSED	连接被拒绝。

	62	ELOOP		软链接层次过多。目标软链接层次超过MAXSYMLINKS
				容许值(32)。

	63	ENAMETOOLONG	文件名过长。路径文件名超过{NAME_MAX}个字符或
				路径长度超过{PATH_MAX}个字符。您也可以参考
				pathconf(2)中的_PC_NO_TRUNC的部分。

	64	EHOSTDOWN	目标主机下线。

	65	EHOSTREACH	无法连接目标主机。

	66	ENOTEMPTY	文件夹非空，即除"."和".."外还有其他内容的情况
				下执行了删除文件夹的操作。

	67	EPROCLIM	进程过多。

	68	EUSERS		用户过多。

	69	EDQUOT		磁盘配额超限。通常是由于调用write(2)因超出磁盘
				用户配额而产生。

	70	ESTALE		NFS文件句柄过期。尝试操作的NFS中的目标文件不可
				用，这可能是由于NFS文件系统中的文件被删除，也
				有可能是其他相似原因产生此错误。

	72	EBADRPC		错误的PRC结构，无法获取RPC交互结果。

	73	ERPCMISMATCH	目标RPC版本与本地RPC版本不一致。

	74	EPROGUNAVAIL	RPC程序不可用。

	75	EPROGMISMATCH	本地RPC所需执行程序在目标RPC主机中不可用。

	76	EPROCUNAVAIL	目标主机并不具备本地程序所需执行功能。

	77	ENOLCK		系统无法分配可用锁，锁已达系统限制的最大值。

	78	ENOSYS		函数无法执行。

	79	EFTYPE		文件类型或格式不正确。

	80	EAUTH		授权错误。

	81	ENEEDAUTH	需要先授权再操作。

	82	EIDRM		验证信息已删除。

	83	ENOMSG		未返回所需信息。

	84	EOVERFLOW	值溢出错误。

	85	ECANCELED	操作被取消。

	86	EILSEQ		非法字节序列。

	87	ENOATTR		未找到对应属性。

	88	EDOOFUS		程序错误。如只可用于运行时的API被用在程序中即
				会出现此错误。

	89	EBADMSG		消息错误。

	90	EMULTIHOP	多跳错误。

	91	ENOLINK		连接已转移。

	92	EPROTO		协议错误。

	93	ENOTCAPABLE	性能不足。

	94	ECAPMODE	不允许调用性能模式。

	95	ENOTRECOVERABLE	重新获取内容失败。

	96	EOWNERDEAD	与当前操作相斥的进程已退出但却保留了进程锁。


定义
	PID - 进程ID - Process ID
		每一个可用进程都在系统中拥有一个唯一的进程ID。ID编码从0起，
		最大进程ID为99999。

	父进程ID - PPID - Parent process ID
		被当前进程所创建的子进程(请参考fork(2))被赋予一个进程组内
		的ID，如果进程组ID存在，则每个子进程ID都是这个编号。您可
		参考init(8)

	进程组 - PG - Prograss Group
		每个独立的进程都拥有一个对应的非负整数编号，这便是进程组ID。
		该组ID也是该组所有子进程的父进程ID。组内的进程共享信号
		(参考termios(4))与csh(1)的作业控制。

	会话 - Session
		绘画是指一个或一组进程组。成功调用setsid(2)便可以产生一个
		标准会话。

	会话主进程 - Session leader
		通过setsid(2)创建的会话即是会话主进程。只有会话主进程可以
		控制整组进程的终端操作，详见termios(4)。

	控制过程 - Controlling process
		会话主进程的终端操作即是一个控制过程。

	控制终端 - Controlling terminal
		控制终端是指会话组或成员可控的终端。

	终端进程组ID - Terminal Process Group ID
		会话主进程可通过控制终端执行终端命令。一旦终端涉及会话操
		作，所有会话成员均会被置入前台并设置终端进程组IP，这个终
		端进程组ID也是进程组ID。此设置用于分辨同一终端下的多任务
		情况。详见csh(1)和tty(4)。

	孤儿进程组 - Ophaned Process Group
		如果一个进程组并不受shell作业控制，那么这个进程组就会被
		标为一个孤儿进程组。更确切的说，在同一会话的不同进程中没
		有父进程的进程组即为孤儿进程组。需要注意的事，只要进程存
		在父进程会被指定为init(8)以区分会话。

	实际用户ID与实际组ID - Real User ID and Real Group ID
		每一个用户在系统中都会分配一个正整数的标识，这便是实际用
		户ID。

		每个用户至少从属于一个用户组，组与组之间相互独立以实现账
		户控制。用于区分用户组之间的正整数标识即是实际组ID。

		所有进程均有一个实际用户ID与实际组ID以区分进程执行者。

	有效用户ID，有效组ID与组权限列表 - Effective User ID, 
				      	   Effective Group ID and 
					   Group Access List
		处理系统资源需要两个值的授权：有效用户ID和组权限列表。首
		个组权限列表即是有效组ID。在POSIX.1中，组权限列表是指一组
		新增的组ID，且并未指定是否组ID为权限列表成员。

		有效用户ID与有效组ID均源于实际用户ID与实际组ID。这些均可
		通过修改set-user-ID或set-group-ID文件完成(参考execve(2))。
		按照惯例，可用组ID(组权限列表第一个成员)是分开的，因此如
		果原始(实际)用户ID丢失，即便执行set-group-ID页不会产生任
		何效果。

		组权限列表是一组组ID，仅用于辨别资源使用权限。其权限检查
		的信息可参考后面的『文件权限许可』。

	保存设置用户ID 与 保存设置组ID - Saved Set User ID and
					 Saved Set Group ID
		当进程生成了一个新的文件，有效用户ID所对应的用户即成为该文
		件的所有者，而有效组ID(组控制列表第一个成员)即是该文件的所
		有组——前提是该用户和组均在set-user-ID和set-group-ID中存在。
		而该文件的用户和组ID会分别被记录为保存设置用户ID与保存设置
		组ID。这些值有助于通过setuid(2)等调用操作时重新获取有效用户
		ID和有效组ID。(在POSIX.1中，保存设置用户ID与保存设置组ID的
		是可选内容，且可被用于setuid和setgid，但这个限制对
		于管理员用户是无效的。)

	管理员用户 - Super-user
		只要用户ID为0，该用户即为管理员用户。管理员用户享有全部权限。

	描述符 - Descriptor
		当文件用于表示open(2)或dup(2)时系统会分配一个整型的值。同样
		在用pip(2)，socket(2)或socketpair(2)创建socket唯一连接处理
		文件的路径或子进程时也会分配。

	文件名 - File Name
		由{NAME_MAX}个字符构成用以表示和管理文件和文件夹的名称。

		这些字符可以是任意可识别的8位字符值，但不能含有NUL(ASCII:0)
		和'/'(正斜线,ASCII:47)。

		注意，如非特殊原因，请不要在文件名中使用'*','?','[',']'等
		容易引起歧义的字符。

	路径名 - Path Name
		路径名即是以NUL结尾的字串，它的起始可以为正斜线'/'，后面跟0个
		或多个目录名，目录名之间用正斜线分隔，通常最后以文件名结尾。
		路径的长度不应超过{PATH_MAX}个字符。在某写系统中，文件名与
		路径名均不设置长度限制。

		如果路径名以正斜线开始，则它是从root开始依次访问的路径。
		如果不以正斜线开始，则表示从当前目录中开始一次访问的路径。
		只有一个正斜线的路径即是根目录。一个空路径则表示为当前路径。

	目录 - Directory
		目录是一种特殊格式的文件，它记录了其下所有文件的进入点。
		这些进入点被成为链接。根据惯例，每一个目录中应至少有两个链
		接，它们分别为“点”('.')和“点点”('..')。“点”用于表示该目录自
		己。“点点”则表示父目录。

	根目录与当前工作目录 - Root Directory and Current Working Directory
		为了解决路径命名问题，每一个进程都有两个目录概念：根目录与
		当前工作目录。进程的根目录可以不是根目录系统下的根目录。

	文件权限许可 - File Access Permissions
		文件系统中的每个文件均设有一套权限许可配置。这些许可将用于
		控制来访用户是否具备指定文件具有相应的访问权限(比如打开、读
		取、写入等)。文件被创建的同时即有一套默认的权限许可配置，通
		过调用chmod(2)可以在创建后改变权限配置。

		文件的权限许可被分为三个部分：读、写和执行。目录的权限需要
		配置为可执行方能被访问。

		文件的权限许可的用户分为三个类型：该文件的所有者、该文件的
		所有组以及其它。每个文件均可独立为这三个类型设置不同的权限。
		当需要检查权限时，系统会通过此配置决定是否授权调用主体对应
		的操作权限。

		当符合以下条件时读、写、执行/搜索这些进程上的操作方可执行，
		否则不授予对应访问权限：

		 * 进程的有效用户ID为管理员用户ID。(管理员用户即便是未赋予
		   执行权限依然可执行。)
		 * 进程的有效用户ID为所有者用户ID且具备该所有者相应的权限。
		 * 进程有效组ID为文件所有组ID且具备该所有组相应的权限。
		 * 进程有效用户ID即不是所有者，也不从属于所有组，但在其他
		   类的权限中具有相应的权限。

	Sockets 与地址族 - Sockets and Address Families
		Socket是后端进程间用于通信的功能。每一个Socket均有一组用于
		收发消息数据的队列。

		Sockets用于通信属性的输入。这些属性包信息的发送与接收括是
		否符合socket对象的请求、命名标准，是否信息接收与通信连接足
		够稳定等。

		每一个系统实例均支持多个socket连接类型。如需详细信息，请参
		考socket(2)。

		每一个系统实例均支持一系列的通信协议。每组协议均支持规定格
		式的地址族。地址组是一组协议所指定的地址组。每个socket被创
		建时均持有一个特定的地址。

参考
  intro(3),perror(3)
