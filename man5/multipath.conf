名称：
	multipath.conf - 多路径服务配置文件

说明：
	multipath.conf是多路径服务的配置文件。它用于重写multipathd的内建配置表。
	文件中以‘#’开头的一行被视为注释行，空行会直接忽略。

配置语法：
	配置文件的条目形如以下格式：

	<段> {
                     <属性> <键值>
                     ...
                     <子段> {
                            <属性> <键值>
                            ...
                     }
              }

	每一个段包含一个或多个属性或子段。每一个段的属性与其子段的识别均取决于段所关联的关键词。段的关键词有如下这些：

	defaults
		用于为空值属性指定一个值
	blacklist
		用于指定多路径拓扑探测中无需包含的项目
	blacklist_exception
		用于为多路径拓扑探测中增加指定的设备。需要注意的是，即便是blacklist已列出的设备，
		如果有指定也会被包含。
	multipaths
		用于定义多路径拓扑结构。其拓扑结构以wwid为索引，该索也是uid_attribute关键词对uuid的赋值。
	device
		配置指定设备的设置

defaults：
	defaults段有以下关键词可用于定义属性和子段：

	polling_interval
		定义各条路径检查的时间间隔，单位：秒。对于正常路径检查而言，此设置会直接增加到max_polling_interval中。默认值：五秒。
	max_polling_interval
		定义各条路径检查的最大时间间隔，单位：秒。默认值： 4 * polling_interval。
	multipath_dir
		指定动态存储对象保存的位置。默认值随系统的不同而有所区别，通常为 /lib/multipath
	find_multipaths
		值为yes时,则会尝试为每一个未列为黑名单的路径chaungjian一个多路径设备。如果存在以下三个之中的任一情形时，multipath将只创建一个设备块：
		1、同一wwid有至少两条未列为黑名单的路径。
		2、用户手动强制在multipath设备上创建多路径服务。
		3、一条路径与某个已经通过find_multipaths创建的设备块有相同的wwid（即便该设备块当前已不存在）。
		当某一设备创建时find_multipaths设置为yes，则multipath会记录该设备的wwid，故一旦发现相同wwid的路径就会自动再创建此设备。这样做的好处是
		任何多路径用户均可自动选择正确的路径创建目标设备，而不用在blacklist中配置复杂的规则。
		默认值：no
	verbosity
		设置默认冗余等级。冗余等级随此值增加而提升。有效值范围：0～6。默认值：2
	reassign_maps
		开启设备device-mapper的重分配映射（可以参考device mapper）。当值为yes时，multipathd将重新映射所有已存在设备以保证映射目标总会是指向一
		个多路径的实际设备而不是候选块设备。取值为yes或no。默认值：yes
	path_selector
		选择默认的路径选择算法。内核多路径目标提供三个可选的算法。
			round-robin 0
				循环遍历路径组的每条路径并向每条路径发送相同的IO数据量。
			queue-length 0
				以最少的IO数量发送下一组IO
			service-time 0
				根据吞吐量以及未完成的IO数量选择下一组IO路径。
	path_grouping_policy
		为未指定多路径配置默认路径分组策略。 有以下值可选择：
			failover
				每个路径一个策略组
			multibus
				所有路径均在一个策略组
			group_by_serial
				每个序列号一个策略组
			group_by_prio
				每个优先级一个策略组。优先级在文件指定为全局、每一控制器或多路径选项的调用程序确定。
			group_by_node_name
				每一目标节点名一个策略组。可用的目标节点均会被记录在 /sys/class/fc_transport/target*/node_name.
		默认值： failover
	uid_attributer
		udev属性提供一个唯一的路径标识符
	prio
		路径优先级例程名。被指定的例程应会返回一个数值以表示其路径的优先级。数值越高期优先级便越高。none值也是合法的。目前已经实现的优先级例程如下：
			const
				永远返回1的优先级
			emc
				为ECM阵列生成路径优先级
			alua
				根据SCSI-3 ALUA设定值生成路径优先级。这个优先权接受额外的prio_arg和exclusive参数。
			ontap
				为NetApp阵列生成路径优先级
			rdac
				为LSI/Enfenio/NetApp的E系列RDAC控制器生成路径优先级
			hp/sw
				为康柏/惠普的活动/备用模式的控制器生成路径优先级
			hds
				为Hitachi HDS 存储阵列单元生成路径优先级
			random
				创建一个1至10之间的任意优先级
			weightedpath
				根据正则和prio_args关键词生成相应的路径优先级
			默认值：const
	rgs
		设置了向prio函数传递的参数。这个关键词只用于特定优先权
			weighted
				需要形如<hbtl|devname|wwn>的<regex1> <prio1> <regex2> <prio2> ...这样的一组值。
				hbtl可以是SCSI的 H:B:T:L格式，比如：1:0:.:., *:0:0:.
				devname是设备名的格式，如：sda, sd.e
				wwn则是host_wwwn:host_wwpn:target_wwnn:target_wwpn的格式。这个值可以通过sysfs或运行multipathd获得。
				其显示路径格式为 %N:%R:%n:%r。如：
				0x200100e08ba0aea0:0x210100e08ba0aea0:.*:.* , .*:.*:iqn.2009-10.com.redhat.msp.lab.ask-06:.*
			alua
				如果事先设置了exclusive_pref_bit的值，TPGS路径会一直处于其自己的路径组内。
	features
		设置使用的设备映射器特性。语法是一组0至6个特性编号。这些特性数列可以是如下值：
			queue_if_no_path
				如果没有活动路径则为IO队列；此特性与no_path_retry关键词等同
			pg_init_retries
				设置尝试pg_init的尝试次数，必须为1至50之间的一个数
			pg_init_delay_msecs
				指定尝试pg_init前先执行多少次msecs，必须为0至60000之间的一个数
